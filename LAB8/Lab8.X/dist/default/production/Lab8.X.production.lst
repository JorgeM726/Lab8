

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Apr 20 11:34:30 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    22                           	dabs	1,0x7E,2
    23     0000                     
    24                           ; Version 2.40
    25                           ; Generated 17/11/2021 GMT
    26                           ; 
    27                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution. Publication is not required when
    41                           ;        this file is used in an embedded application.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F887 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59     0000                     	;# 
    60     0001                     	;# 
    61     0002                     	;# 
    62     0003                     	;# 
    63     0004                     	;# 
    64     0005                     	;# 
    65     0006                     	;# 
    66     0007                     	;# 
    67     0008                     	;# 
    68     0009                     	;# 
    69     000A                     	;# 
    70     000B                     	;# 
    71     000C                     	;# 
    72     000D                     	;# 
    73     000E                     	;# 
    74     000E                     	;# 
    75     000F                     	;# 
    76     0010                     	;# 
    77     0011                     	;# 
    78     0012                     	;# 
    79     0013                     	;# 
    80     0014                     	;# 
    81     0015                     	;# 
    82     0015                     	;# 
    83     0016                     	;# 
    84     0017                     	;# 
    85     0018                     	;# 
    86     0019                     	;# 
    87     001A                     	;# 
    88     001B                     	;# 
    89     001B                     	;# 
    90     001C                     	;# 
    91     001D                     	;# 
    92     001E                     	;# 
    93     001F                     	;# 
    94     0081                     	;# 
    95     0085                     	;# 
    96     0086                     	;# 
    97     0087                     	;# 
    98     0088                     	;# 
    99     0089                     	;# 
   100     008C                     	;# 
   101     008D                     	;# 
   102     008E                     	;# 
   103     008F                     	;# 
   104     0090                     	;# 
   105     0091                     	;# 
   106     0092                     	;# 
   107     0093                     	;# 
   108     0093                     	;# 
   109     0093                     	;# 
   110     0094                     	;# 
   111     0095                     	;# 
   112     0096                     	;# 
   113     0097                     	;# 
   114     0098                     	;# 
   115     0099                     	;# 
   116     009A                     	;# 
   117     009B                     	;# 
   118     009C                     	;# 
   119     009D                     	;# 
   120     009E                     	;# 
   121     009F                     	;# 
   122     0105                     	;# 
   123     0107                     	;# 
   124     0108                     	;# 
   125     0109                     	;# 
   126     010C                     	;# 
   127     010C                     	;# 
   128     010D                     	;# 
   129     010E                     	;# 
   130     010F                     	;# 
   131     0185                     	;# 
   132     0187                     	;# 
   133     0188                     	;# 
   134     0189                     	;# 
   135     018C                     	;# 
   136     018D                     	;# 
   137     0000                     	;# 
   138     0001                     	;# 
   139     0002                     	;# 
   140     0003                     	;# 
   141     0004                     	;# 
   142     0005                     	;# 
   143     0006                     	;# 
   144     0007                     	;# 
   145     0008                     	;# 
   146     0009                     	;# 
   147     000A                     	;# 
   148     000B                     	;# 
   149     000C                     	;# 
   150     000D                     	;# 
   151     000E                     	;# 
   152     000E                     	;# 
   153     000F                     	;# 
   154     0010                     	;# 
   155     0011                     	;# 
   156     0012                     	;# 
   157     0013                     	;# 
   158     0014                     	;# 
   159     0015                     	;# 
   160     0015                     	;# 
   161     0016                     	;# 
   162     0017                     	;# 
   163     0018                     	;# 
   164     0019                     	;# 
   165     001A                     	;# 
   166     001B                     	;# 
   167     001B                     	;# 
   168     001C                     	;# 
   169     001D                     	;# 
   170     001E                     	;# 
   171     001F                     	;# 
   172     0081                     	;# 
   173     0085                     	;# 
   174     0086                     	;# 
   175     0087                     	;# 
   176     0088                     	;# 
   177     0089                     	;# 
   178     008C                     	;# 
   179     008D                     	;# 
   180     008E                     	;# 
   181     008F                     	;# 
   182     0090                     	;# 
   183     0091                     	;# 
   184     0092                     	;# 
   185     0093                     	;# 
   186     0093                     	;# 
   187     0093                     	;# 
   188     0094                     	;# 
   189     0095                     	;# 
   190     0096                     	;# 
   191     0097                     	;# 
   192     0098                     	;# 
   193     0099                     	;# 
   194     009A                     	;# 
   195     009B                     	;# 
   196     009C                     	;# 
   197     009D                     	;# 
   198     009E                     	;# 
   199     009F                     	;# 
   200     0105                     	;# 
   201     0107                     	;# 
   202     0108                     	;# 
   203     0109                     	;# 
   204     010C                     	;# 
   205     010C                     	;# 
   206     010D                     	;# 
   207     010E                     	;# 
   208     010F                     	;# 
   209     0185                     	;# 
   210     0187                     	;# 
   211     0188                     	;# 
   212     0189                     	;# 
   213     018C                     	;# 
   214     018D                     	;# 
   215                           
   216                           	psect	idataBANK0
   217     0256                     __pidataBANK0:
   218                           
   219                           ;initializer for _cString
   220     0256  3437               	retlw	low ((STR_1-__stringbase)| (0+32768))
   221                           
   222                           	psect	strings
   223     0100                     __pstrings:
   224     0100                     stringtab:
   225     0100                     __stringtab:
   226     0100                     stringcode:	
   227                           ;	String table - string pointers are 1 byte each
   228                           
   229     0100                     stringdir:
   230     0100  3001               	movlw	high stringdir
   231     0101  008A               	movwf	10
   232     0102  0804               	movf	4,w
   233     0103  0A84               	incf	4,f
   234     0104  0782               	addwf	2,f
   235     0105                     __stringbase:
   236     0105  3400               	retlw	0
   237     0106                     __end_of__stringtab:
   238     0106                     _dato:
   239     0106  3441               	retlw	65
   240     0107                     __end_of_dato:
   241     001A                     _RCREG	set	26
   242     0019                     _TXREG	set	25
   243     000B                     _INTCONbits	set	11
   244     0018                     _RCSTAbits	set	24
   245     0006                     _PORTB	set	6
   246     0008                     _PORTD	set	8
   247     001E                     _ADRESH	set	30
   248     0005                     _PORTA	set	5
   249     001F                     _ADCON0bits	set	31
   250     000C                     _PIR1bits	set	12
   251     0065                     _RCIF	set	101
   252     008C                     _PIE1bits	set	140
   253     009F                     _ADCON1bits	set	159
   254     009A                     _SPBRGH	set	154
   255     0099                     _SPBRG	set	153
   256     0098                     _TXSTAbits	set	152
   257     008F                     _OSCCONbits	set	143
   258     0088                     _TRISD	set	136
   259     0086                     _TRISB	set	134
   260     0085                     _TRISA	set	133
   261     04C1                     _TRMT	set	1217
   262     0187                     _BAUDCTLbits	set	391
   263     0189                     _ANSELH	set	393
   264     0188                     _ANSEL	set	392
   265     0107                     STR_4:
   266     0107  3449               	retlw	73	;'I'
   267     0108  346E               	retlw	110	;'n'
   268     0109  3467               	retlw	103	;'g'
   269     010A  3472               	retlw	114	;'r'
   270     010B  3465               	retlw	101	;'e'
   271     010C  3473               	retlw	115	;'s'
   272     010D  3465               	retlw	101	;'e'
   273     010E  3420               	retlw	32	;' '
   274     010F  3465               	retlw	101	;'e'
   275     0110  346C               	retlw	108	;'l'
   276     0111  3420               	retlw	32	;' '
   277     0112  346E               	retlw	110	;'n'
   278     0113  3475               	retlw	117	;'u'
   279     0114  346D               	retlw	109	;'m'
   280     0115  3465               	retlw	101	;'e'
   281     0116  3472               	retlw	114	;'r'
   282     0117  346F               	retlw	111	;'o'
   283     0118  3420               	retlw	32	;' '
   284     0119  3464               	retlw	100	;'d'
   285     011A  3465               	retlw	101	;'e'
   286     011B  3420               	retlw	32	;' '
   287     011C  3463               	retlw	99	;'c'
   288     011D  3461               	retlw	97	;'a'
   289     011E  3472               	retlw	114	;'r'
   290     011F  3461               	retlw	97	;'a'
   291     0120  3463               	retlw	99	;'c'
   292     0121  3474               	retlw	116	;'t'
   293     0122  3465               	retlw	101	;'e'
   294     0123  3472               	retlw	114	;'r'
   295     0124  3420               	retlw	32	;' '
   296     0125  3465               	retlw	101	;'e'
   297     0126  346E               	retlw	110	;'n'
   298     0127  3420               	retlw	32	;' '
   299     0128  3441               	retlw	65	;'A'
   300     0129  3453               	retlw	83	;'S'
   301     012A  3443               	retlw	67	;'C'
   302     012B  3449               	retlw	73	;'I'
   303     012C  3449               	retlw	73	;'I'
   304     012D  3420               	retlw	32	;' '
   305     012E  3428               	retlw	40	;'('
   306     012F  3432               	retlw	50	;'2'
   307     0130  3420               	retlw	32	;' '
   308     0131  3464               	retlw	100	;'d'
   309     0132  3469               	retlw	105	;'i'
   310     0133  3467               	retlw	103	;'g'
   311     0134  3469               	retlw	105	;'i'
   312     0135  3474               	retlw	116	;'t'
   313     0136  346F               	retlw	111	;'o'
   314     0137  3473               	retlw	115	;'s'
   315     0138  3429               	retlw	41	;')'
   316     0139  343A               	retlw	58	;':'
   317     013A  3420               	retlw	32	;' '
   318     013B  3400               	retlw	0
   319     013C                     STR_1:
   320     013C  3431               	retlw	49	;'1'
   321     013D  342E               	retlw	46	;'.'
   322     013E  3420               	retlw	32	;' '
   323     013F  344C               	retlw	76	;'L'
   324     0140  3465               	retlw	101	;'e'
   325     0141  3465               	retlw	101	;'e'
   326     0142  3472               	retlw	114	;'r'
   327     0143  3420               	retlw	32	;' '
   328     0144  3470               	retlw	112	;'p'
   329     0145  346F               	retlw	111	;'o'
   330     0146  3474               	retlw	116	;'t'
   331     0147  342E               	retlw	46	;'.'
   332     0148  3420               	retlw	32	;' '
   333     0149  340D               	retlw	13
   334     014A  340A               	retlw	10
   335     014B  3432               	retlw	50	;'2'
   336     014C  342E               	retlw	46	;'.'
   337     014D  3420               	retlw	32	;' '
   338     014E  3445               	retlw	69	;'E'
   339     014F  346E               	retlw	110	;'n'
   340     0150  3476               	retlw	118	;'v'
   341     0151  3469               	retlw	105	;'i'
   342     0152  3461               	retlw	97	;'a'
   343     0153  3472               	retlw	114	;'r'
   344     0154  3420               	retlw	32	;' '
   345     0155  3441               	retlw	65	;'A'
   346     0156  3473               	retlw	115	;'s'
   347     0157  3463               	retlw	99	;'c'
   348     0158  3469               	retlw	105	;'i'
   349     0159  3469               	retlw	105	;'i'
   350     015A  340D               	retlw	13
   351     015B  340A               	retlw	10
   352     015C  3400               	retlw	0
   353     015D                     STR_2:
   354     015D  3431               	retlw	49	;'1'
   355     015E  3400               	retlw	0
   356     015F                     STR_3:
   357     015F  3432               	retlw	50	;'2'
   358     0160  3400               	retlw	0
   359                           
   360                           	psect	cinit
   361     000F                     start_initialization:	
   362                           ; #config settings
   363                           
   364     000F                     __initialization:
   365                           
   366                           ; Initialize objects allocated to BANK0
   367     000F  120A  118A  2256  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   368     0014  00A7               	movwf	__pdataBANK0& (0+127)
   369                           
   370                           ; Clear objects allocated to BANK0
   371     0015  01A0               	clrf	__pbssBANK0& (0+127)
   372     0016  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   373     0017  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   374     0018  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   375     0019                     end_of_initialization:	
   376                           ;End of C runtime variable initialization code
   377                           
   378     0019                     __end_of__initialization:
   379     0019  0183               	clrf	3
   380     001A  120A  118A  281D   	ljmp	_main	;jump to C main() function
   381                           
   382                           	psect	bssBANK0
   383     0020                     __pbssBANK0:
   384     0020                     _numero:
   385     0020                     	ds	2
   386     0022                     _input:
   387     0022                     	ds	2
   388                           
   389                           	psect	dataBANK0
   390     0027                     __pdataBANK0:
   391     0027                     _cString:
   392     0027                     	ds	1
   393                           
   394                           	psect	cstackCOMMON
   395     0070                     __pcstackCOMMON:
   396     0070                     ?_setup:
   397     0070                     ?_USART_print:	
   398                           ; 1 bytes @ 0x0
   399                           
   400     0070                     ?_USART_read:	
   401                           ; 1 bytes @ 0x0
   402                           
   403     0070                     ?_USART_send:	
   404                           ; 1 bytes @ 0x0
   405                           
   406     0070                     ?_isr:	
   407                           ; 1 bytes @ 0x0
   408                           
   409     0070                     ??_isr:	
   410                           ; 1 bytes @ 0x0
   411                           
   412     0070                     ?_main:	
   413                           ; 1 bytes @ 0x0
   414                           
   415                           
   416                           ; 1 bytes @ 0x0
   417     0070                     	ds	4
   418     0074                     ??_setup:
   419     0074                     ??_USART_read:	
   420                           ; 1 bytes @ 0x4
   421                           
   422     0074                     ??_USART_send:	
   423                           ; 1 bytes @ 0x4
   424                           
   425     0074                     ?___bmul:	
   426                           ; 1 bytes @ 0x4
   427                           
   428     0074                     ?_strcmp:	
   429                           ; 1 bytes @ 0x4
   430                           
   431     0074                     USART_send@data:	
   432                           ; 2 bytes @ 0x4
   433                           
   434     0074                     ___bmul@multiplicand:	
   435                           ; 1 bytes @ 0x4
   436                           
   437     0074                     strcmp@s2:	
   438                           ; 1 bytes @ 0x4
   439                           
   440                           
   441                           ; 1 bytes @ 0x4
   442     0074                     	ds	1
   443     0075                     ??_USART_print:
   444     0075                     ??___bmul:	
   445                           ; 1 bytes @ 0x5
   446                           
   447     0075                     USART_print@i:	
   448                           ; 1 bytes @ 0x5
   449                           
   450                           
   451                           ; 2 bytes @ 0x5
   452     0075                     	ds	1
   453     0076                     ??_strcmp:
   454     0076                     ___bmul@product:	
   455                           ; 1 bytes @ 0x6
   456                           
   457                           
   458                           ; 1 bytes @ 0x6
   459     0076                     	ds	1
   460     0077                     USART_print@string:
   461     0077                     ___bmul@multiplier:	
   462                           ; 1 bytes @ 0x7
   463                           
   464                           
   465                           ; 1 bytes @ 0x7
   466     0077                     	ds	1
   467     0078                     strcmp@r:
   468                           
   469                           ; 1 bytes @ 0x8
   470     0078                     	ds	1
   471     0079                     strcmp@s1:
   472                           
   473                           ; 1 bytes @ 0x9
   474     0079                     	ds	1
   475                           
   476                           	psect	cstackBANK0
   477     0024                     __pcstackBANK0:
   478     0024                     ??_main:
   479                           
   480                           ; 1 bytes @ 0x0
   481     0024                     	ds	1
   482     0025                     main@highByte:
   483                           
   484                           ; 1 bytes @ 0x1
   485     0025                     	ds	1
   486     0026                     main@lowByte:
   487                           
   488                           ; 1 bytes @ 0x2
   489     0026                     	ds	1
   490                           
   491                           	psect	maintext
   492     001D                     __pmaintext:	
   493 ;;
   494 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   495 ;;
   496 ;; *************** function _main *****************
   497 ;; Defined at:
   498 ;;		line 67 in file "USART.c"
   499 ;; Parameters:    Size  Location     Type
   500 ;;		None
   501 ;; Auto vars:     Size  Location     Type
   502 ;;  lowByte         1    2[BANK0 ] unsigned char 
   503 ;;  highByte        1    1[BANK0 ] unsigned char 
   504 ;; Return value:  Size  Location     Type
   505 ;;                  1    wreg      void 
   506 ;; Registers used:
   507 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   508 ;; Tracked objects:
   509 ;;		On entry : B00/0
   510 ;;		On exit  : 0/0
   511 ;;		Unchanged: 0/0
   512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   513 ;;      Params:         0       0       0       0       0
   514 ;;      Locals:         0       2       0       0       0
   515 ;;      Temps:          0       1       0       0       0
   516 ;;      Totals:         0       3       0       0       0
   517 ;;Total ram usage:        3 bytes
   518 ;; Hardware stack levels required when called: 3
   519 ;; This function calls:
   520 ;;		_USART_print
   521 ;;		_USART_read
   522 ;;		_USART_send
   523 ;;		___bmul
   524 ;;		_setup
   525 ;;		_strcmp
   526 ;; This function is called by:
   527 ;;		Startup code after reset
   528 ;; This function uses a non-reentrant model
   529 ;;
   530                           
   531     001D                     _main:	
   532                           ;psect for function _main
   533                           
   534     001D                     l988:	
   535                           ;incstack = 0
   536                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   537                           
   538                           
   539                           ;USART.c: 68:     setup();
   540     001D  120A  118A  2161  120A  118A  	fcall	_setup
   541     0022                     l990:
   542                           
   543                           ;USART.c: 71:     if(ADCON0bits.GO == 0){
   544     0022  1283               	bcf	3,5	;RP0=0, select bank0
   545     0023  1303               	bcf	3,6	;RP1=0, select bank0
   546     0024  189F               	btfsc	31,1	;volatile
   547     0025  2827               	goto	u231
   548     0026  2828               	goto	u230
   549     0027                     u231:
   550     0027  2844               	goto	l1002
   551     0028                     u230:
   552     0028                     l992:
   553                           
   554                           ;USART.c: 72:             if(ADCON0bits.CHS == 12) {
   555     0028  0C1F               	rrf	31,w	;volatile
   556     0029  00A4               	movwf	??_main
   557     002A  0C24               	rrf	??_main,w
   558     002B  390F               	andlw	15
   559     002C  3A0C               	xorlw	12
   560     002D  1D03               	skipz
   561     002E  2830               	goto	u241
   562     002F  2831               	goto	u240
   563     0030                     u241:
   564     0030  2836               	goto	l996
   565     0031                     u240:
   566     0031                     l994:
   567                           
   568                           ;USART.c: 73:                 ADCON0bits.CHS = 10;
   569     0031  081F               	movf	31,w	;volatile
   570     0032  39C3               	andlw	-61
   571     0033  3828               	iorlw	40
   572     0034  009F               	movwf	31	;volatile
   573                           
   574                           ;USART.c: 74:             }
   575     0035  283A               	goto	l998
   576     0036                     l996:
   577                           
   578                           ;USART.c: 76:                 ADCON0bits.CHS = 12;
   579     0036  081F               	movf	31,w	;volatile
   580     0037  39C3               	andlw	-61
   581     0038  3830               	iorlw	48
   582     0039  009F               	movwf	31	;volatile
   583     003A                     l998:
   584                           
   585                           ;USART.c: 77:                 _delay((unsigned long)((100)*(1000000/4000000.0)));
   586     003A  3007               	movlw	7
   587     003B  1283               	bcf	3,5	;RP0=0, select bank0
   588     003C  1303               	bcf	3,6	;RP1=0, select bank0
   589     003D  00A4               	movwf	??_main
   590     003E                     u277:
   591     003E  0BA4               	decfsz	??_main,f
   592     003F  283E               	goto	u277
   593     0040  0000               	nop
   594     0041                     l1000:
   595                           
   596                           ;USART.c: 78:                 ADCON0bits.GO = 1;
   597     0041  1283               	bcf	3,5	;RP0=0, select bank0
   598     0042  1303               	bcf	3,6	;RP1=0, select bank0
   599     0043  149F               	bsf	31,1	;volatile
   600     0044                     l1002:
   601                           
   602                           ;USART.c: 81:     USART_print(cString);
   603     0044  3037               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   604     0045  120A  118A  21E7  120A  118A  	fcall	_USART_print
   605     004A                     l1004:
   606                           
   607                           ;USART.c: 82:     input[0] = USART_read();
   608     004A  120A  118A  224E  120A  118A  	fcall	_USART_read
   609     004F  1283               	bcf	3,5	;RP0=0, select bank0
   610     0050  1303               	bcf	3,6	;RP1=0, select bank0
   611     0051  00A2               	movwf	_input
   612     0052                     l1006:
   613                           
   614                           ;USART.c: 83:     input[1] = '\0';
   615     0052  01A3               	clrf	_input+1
   616     0053                     l1008:
   617                           
   618                           ;USART.c: 84:     if (strcmp(input, "1") == 0){
   619     0053  3058               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   620     0054  00F4               	movwf	strcmp@s2
   621     0055  3022               	movlw	(low (_input| 0))& (0+255)
   622     0056  120A  118A  21BB  120A  118A  	fcall	_strcmp
   623     005B  0874               	movf	?_strcmp,w
   624     005C  0475               	iorwf	?_strcmp+1,w
   625     005D  1D03               	btfss	3,2
   626     005E  2860               	goto	u251
   627     005F  2861               	goto	u250
   628     0060                     u251:
   629     0060  2866               	goto	l1012
   630     0061                     u250:
   631     0061                     l1010:
   632                           
   633                           ;USART.c: 85:     PORTD = numero;
   634     0061  1283               	bcf	3,5	;RP0=0, select bank0
   635     0062  1303               	bcf	3,6	;RP1=0, select bank0
   636     0063  0820               	movf	_numero,w
   637     0064  0088               	movwf	8	;volatile
   638                           
   639                           ;USART.c: 86: } else if (strcmp(input, "2") == 0){
   640     0065  2822               	goto	l990
   641     0066                     l1012:
   642     0066  305A               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   643     0067  00F4               	movwf	strcmp@s2
   644     0068  3022               	movlw	(low (_input| 0))& (0+255)
   645     0069  120A  118A  21BB  120A  118A  	fcall	_strcmp
   646     006E  0874               	movf	?_strcmp,w
   647     006F  0475               	iorwf	?_strcmp+1,w
   648     0070  1D03               	btfss	3,2
   649     0071  2873               	goto	u261
   650     0072  2874               	goto	u260
   651     0073                     u261:
   652     0073  28A6               	goto	l1026
   653     0074                     u260:
   654     0074                     l1014:
   655                           
   656                           ;USART.c: 87:     USART_print("Ingrese el numero de caracter en ASCII (2 digitos): ");
   657     0074  3002               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   658     0075  120A  118A  21E7  120A  118A  	fcall	_USART_print
   659     007A                     l1016:
   660                           
   661                           ;USART.c: 88:     char highByte = USART_read();
   662     007A  120A  118A  224E  120A  118A  	fcall	_USART_read
   663     007F  1283               	bcf	3,5	;RP0=0, select bank0
   664     0080  1303               	bcf	3,6	;RP1=0, select bank0
   665     0081  00A5               	movwf	main@highByte
   666     0082                     l1018:
   667                           
   668                           ;USART.c: 89:     USART_send(highByte);
   669     0082  0825               	movf	main@highByte,w
   670     0083  120A  118A  2242  120A  118A  	fcall	_USART_send
   671     0088                     l1020:
   672                           
   673                           ;USART.c: 90:     char lowByte = USART_read();
   674     0088  120A  118A  224E  120A  118A  	fcall	_USART_read
   675     008D  1283               	bcf	3,5	;RP0=0, select bank0
   676     008E  1303               	bcf	3,6	;RP1=0, select bank0
   677     008F  00A6               	movwf	main@lowByte
   678     0090                     l1022:
   679                           
   680                           ;USART.c: 91:     USART_send(lowByte);
   681     0090  0826               	movf	main@lowByte,w
   682     0091  120A  118A  2242  120A  118A  	fcall	_USART_send
   683     0096                     l1024:
   684                           
   685                           ;USART.c: 92:     PORTD = (highByte - '0') * 10 + (lowByte - '0');
   686     0096  300A               	movlw	10
   687     0097  00F4               	movwf	___bmul@multiplicand
   688     0098  1283               	bcf	3,5	;RP0=0, select bank0
   689     0099  1303               	bcf	3,6	;RP1=0, select bank0
   690     009A  0825               	movf	main@highByte,w
   691     009B  120A  118A  222D  120A  118A  	fcall	___bmul
   692     00A0  1283               	bcf	3,5	;RP0=0, select bank0
   693     00A1  1303               	bcf	3,6	;RP1=0, select bank0
   694     00A2  0726               	addwf	main@lowByte,w
   695     00A3  3EF0               	addlw	240
   696     00A4  0088               	movwf	8	;volatile
   697                           
   698                           ;USART.c: 93: }else {
   699     00A5  2822               	goto	l990
   700     00A6                     l1026:
   701                           
   702                           ;USART.c: 94:     PORTD = 0;
   703     00A6  1283               	bcf	3,5	;RP0=0, select bank0
   704     00A7  1303               	bcf	3,6	;RP1=0, select bank0
   705     00A8  0188               	clrf	8	;volatile
   706     00A9  2822               	goto	l990
   707     00AA  120A  118A  280C   	ljmp	start
   708     00AD                     __end_of_main:
   709                           
   710                           	psect	text1
   711     01BB                     __ptext1:	
   712 ;; *************** function _strcmp *****************
   713 ;; Defined at:
   714 ;;		line 33 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\strcmp.c"
   715 ;; Parameters:    Size  Location     Type
   716 ;;  s1              1    wreg     PTR const unsigned char 
   717 ;;		 -> input(2), 
   718 ;;  s2              1    4[COMMON] PTR const unsigned char 
   719 ;;		 -> STR_3(2), STR_2(2), 
   720 ;; Auto vars:     Size  Location     Type
   721 ;;  s1              1    9[COMMON] PTR const unsigned char 
   722 ;;		 -> input(2), 
   723 ;;  r               1    8[COMMON] char 
   724 ;; Return value:  Size  Location     Type
   725 ;;                  2    4[COMMON] int 
   726 ;; Registers used:
   727 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   728 ;; Tracked objects:
   729 ;;		On entry : 0/0
   730 ;;		On exit  : 0/0
   731 ;;		Unchanged: 0/0
   732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   733 ;;      Params:         2       0       0       0       0
   734 ;;      Locals:         2       0       0       0       0
   735 ;;      Temps:          2       0       0       0       0
   736 ;;      Totals:         6       0       0       0       0
   737 ;;Total ram usage:        6 bytes
   738 ;; Hardware stack levels used: 2
   739 ;; Hardware stack levels required when called: 1
   740 ;; This function calls:
   741 ;;		Nothing
   742 ;; This function is called by:
   743 ;;		_main
   744 ;; This function uses a non-reentrant model
   745 ;;
   746                           
   747     01BB                     _strcmp:	
   748                           ;psect for function _strcmp
   749                           
   750                           
   751                           ;incstack = 0
   752                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+pclath]
   753                           ;strcmp@s1 stored from wreg
   754     01BB  00F9               	movwf	strcmp@s1
   755     01BC                     l948:
   756     01BC  29C5               	goto	l954
   757     01BD                     l950:
   758     01BD  3001               	movlw	1
   759     01BE  00F6               	movwf	??_strcmp
   760     01BF  0876               	movf	??_strcmp,w
   761     01C0  07F9               	addwf	strcmp@s1,f
   762     01C1                     l952:
   763     01C1  3001               	movlw	1
   764     01C2  00F6               	movwf	??_strcmp
   765     01C3  0876               	movf	??_strcmp,w
   766     01C4  07F4               	addwf	strcmp@s2,f
   767     01C5                     l954:
   768     01C5  0874               	movf	strcmp@s2,w
   769     01C6  0084               	movwf	4
   770     01C7  120A  118A  2100  120A  118A  	fcall	stringdir
   771     01CC  00F6               	movwf	??_strcmp
   772     01CD  0879               	movf	strcmp@s1,w
   773     01CE  0084               	movwf	4
   774     01CF  1383               	bcf	3,7	;select IRP bank0
   775     01D0  0800               	movf	0,w
   776     01D1  00F7               	movwf	??_strcmp+1
   777     01D2  0876               	movf	??_strcmp,w
   778     01D3  0277               	subwf	??_strcmp+1,w
   779     01D4  00F8               	movwf	strcmp@r
   780     01D5  0878               	movf	strcmp@r,w
   781     01D6  1D03               	btfss	3,2
   782     01D7  29D9               	goto	u171
   783     01D8  29DA               	goto	u170
   784     01D9                     u171:
   785     01D9  29E1               	goto	l958
   786     01DA                     u170:
   787     01DA                     l956:
   788     01DA  0879               	movf	strcmp@s1,w
   789     01DB  0084               	movwf	4
   790     01DC  0800               	movf	0,w
   791     01DD  1D03               	btfss	3,2
   792     01DE  29E0               	goto	u181
   793     01DF  29E1               	goto	u180
   794     01E0                     u181:
   795     01E0  29BD               	goto	l950
   796     01E1                     u180:
   797     01E1                     l958:
   798     01E1  0878               	movf	strcmp@r,w
   799     01E2  00F4               	movwf	?_strcmp
   800     01E3  01F5               	clrf	?_strcmp+1
   801     01E4  1BF4               	btfsc	?_strcmp,7
   802     01E5  03F5               	decf	?_strcmp+1,f
   803     01E6                     l654:
   804     01E6  0008               	return
   805     01E7                     __end_of_strcmp:
   806                           
   807                           	psect	text2
   808     0161                     __ptext2:	
   809 ;; *************** function _setup *****************
   810 ;; Defined at:
   811 ;;		line 109 in file "USART.c"
   812 ;; Parameters:    Size  Location     Type
   813 ;;		None
   814 ;; Auto vars:     Size  Location     Type
   815 ;;		None
   816 ;; Return value:  Size  Location     Type
   817 ;;                  1    wreg      void 
   818 ;; Registers used:
   819 ;;		wreg, status,2, status,0
   820 ;; Tracked objects:
   821 ;;		On entry : 0/0
   822 ;;		On exit  : 0/0
   823 ;;		Unchanged: 0/0
   824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   825 ;;      Params:         0       0       0       0       0
   826 ;;      Locals:         0       0       0       0       0
   827 ;;      Temps:          1       0       0       0       0
   828 ;;      Totals:         1       0       0       0       0
   829 ;;Total ram usage:        1 bytes
   830 ;; Hardware stack levels used: 1
   831 ;; Hardware stack levels required when called: 1
   832 ;; This function calls:
   833 ;;		Nothing
   834 ;; This function is called by:
   835 ;;		_main
   836 ;; This function uses a non-reentrant model
   837 ;;
   838                           
   839     0161                     _setup:	
   840                           ;psect for function _setup
   841                           
   842     0161                     l874:	
   843                           ;incstack = 0
   844                           ; Regs used in _setup: [wreg+status,2+status,0]
   845                           
   846                           
   847                           ;USART.c: 110:     ANSEL = 0X00;
   848     0161  1683               	bsf	3,5	;RP0=1, select bank3
   849     0162  1703               	bsf	3,6	;RP1=1, select bank3
   850     0163  0188               	clrf	8	;volatile
   851     0164                     l876:
   852                           
   853                           ;USART.c: 111:     ANSELH = 0b00000011;
   854     0164  3003               	movlw	3
   855     0165  0089               	movwf	9	;volatile
   856     0166                     l878:
   857                           
   858                           ;USART.c: 112:      TRISA = 0X00;
   859     0166  1683               	bsf	3,5	;RP0=1, select bank1
   860     0167  1303               	bcf	3,6	;RP1=0, select bank1
   861     0168  0185               	clrf	5	;volatile
   862     0169                     l880:
   863                           
   864                           ;USART.c: 113:     PORTA = 0X00;
   865     0169  1283               	bcf	3,5	;RP0=0, select bank0
   866     016A  1303               	bcf	3,6	;RP1=0, select bank0
   867     016B  0185               	clrf	5	;volatile
   868     016C                     l882:
   869                           
   870                           ;USART.c: 114:     TRISB = 0b00000011;
   871     016C  3003               	movlw	3
   872     016D  1683               	bsf	3,5	;RP0=1, select bank1
   873     016E  1303               	bcf	3,6	;RP1=0, select bank1
   874     016F  0086               	movwf	6	;volatile
   875     0170                     l884:
   876                           
   877                           ;USART.c: 115:     PORTB = 0b00000011;
   878     0170  3003               	movlw	3
   879     0171  1283               	bcf	3,5	;RP0=0, select bank0
   880     0172  1303               	bcf	3,6	;RP1=0, select bank0
   881     0173  0086               	movwf	6	;volatile
   882     0174                     l886:
   883                           
   884                           ;USART.c: 116:     TRISD = 0;
   885     0174  1683               	bsf	3,5	;RP0=1, select bank1
   886     0175  1303               	bcf	3,6	;RP1=0, select bank1
   887     0176  0188               	clrf	8	;volatile
   888     0177                     l888:
   889                           
   890                           ;USART.c: 117:     PORTD = 0;
   891     0177  1283               	bcf	3,5	;RP0=0, select bank0
   892     0178  1303               	bcf	3,6	;RP1=0, select bank0
   893     0179  0188               	clrf	8	;volatile
   894     017A                     l890:
   895                           
   896                           ;USART.c: 120:     OSCCONbits.IRCF = 0b100;
   897     017A  1683               	bsf	3,5	;RP0=1, select bank1
   898     017B  1303               	bcf	3,6	;RP1=0, select bank1
   899     017C  080F               	movf	15,w	;volatile
   900     017D  398F               	andlw	-113
   901     017E  3840               	iorlw	64
   902     017F  008F               	movwf	15	;volatile
   903     0180                     l892:
   904                           
   905                           ;USART.c: 121:     OSCCONbits.SCS = 1;
   906     0180  140F               	bsf	15,0	;volatile
   907     0181                     l894:
   908                           
   909                           ;USART.c: 124:     TXSTAbits.SYNC = 0;
   910     0181  1218               	bcf	24,4	;volatile
   911     0182                     l896:
   912                           
   913                           ;USART.c: 125:     TXSTAbits.BRGH = 1;
   914     0182  1518               	bsf	24,2	;volatile
   915     0183                     l898:
   916                           
   917                           ;USART.c: 126:     BAUDCTLbits.BRG16 = 1;
   918     0183  1683               	bsf	3,5	;RP0=1, select bank3
   919     0184  1703               	bsf	3,6	;RP1=1, select bank3
   920     0185  1587               	bsf	7,3	;volatile
   921     0186                     l900:
   922                           
   923                           ;USART.c: 127:     SPBRG = 25;
   924     0186  3019               	movlw	25
   925     0187  1683               	bsf	3,5	;RP0=1, select bank1
   926     0188  1303               	bcf	3,6	;RP1=0, select bank1
   927     0189  0099               	movwf	25	;volatile
   928     018A                     l902:
   929                           
   930                           ;USART.c: 128:     SPBRGH = 0;
   931     018A  019A               	clrf	26	;volatile
   932     018B                     l904:
   933                           
   934                           ;USART.c: 130:     RCSTAbits.SPEN = 1;
   935     018B  1283               	bcf	3,5	;RP0=0, select bank0
   936     018C  1303               	bcf	3,6	;RP1=0, select bank0
   937     018D  1798               	bsf	24,7	;volatile
   938     018E                     l906:
   939                           
   940                           ;USART.c: 131:     RCSTAbits.RX9 = 0;
   941     018E  1318               	bcf	24,6	;volatile
   942     018F                     l908:
   943                           
   944                           ;USART.c: 132:     RCSTAbits.CREN = 1;
   945     018F  1618               	bsf	24,4	;volatile
   946     0190                     l910:
   947                           
   948                           ;USART.c: 133:     TXSTAbits.TXEN = 1;
   949     0190  1683               	bsf	3,5	;RP0=1, select bank1
   950     0191  1303               	bcf	3,6	;RP1=0, select bank1
   951     0192  1698               	bsf	24,5	;volatile
   952                           
   953                           ;USART.c: 136:     ADCON0bits.ADCS = 0b01;
   954     0193  1283               	bcf	3,5	;RP0=0, select bank0
   955     0194  1303               	bcf	3,6	;RP1=0, select bank0
   956     0195  081F               	movf	31,w	;volatile
   957     0196  393F               	andlw	-193
   958     0197  3840               	iorlw	64
   959     0198  009F               	movwf	31	;volatile
   960     0199                     l912:
   961                           
   962                           ;USART.c: 137:     ADCON1bits.VCFG0 = 0;
   963     0199  1683               	bsf	3,5	;RP0=1, select bank1
   964     019A  1303               	bcf	3,6	;RP1=0, select bank1
   965     019B  121F               	bcf	31,4	;volatile
   966     019C                     l914:
   967                           
   968                           ;USART.c: 138:     ADCON1bits.VCFG1 = 0;
   969     019C  129F               	bcf	31,5	;volatile
   970                           
   971                           ;USART.c: 139:     ADCON0bits.CHS = 12;
   972     019D  1283               	bcf	3,5	;RP0=0, select bank0
   973     019E  1303               	bcf	3,6	;RP1=0, select bank0
   974     019F  081F               	movf	31,w	;volatile
   975     01A0  39C3               	andlw	-61
   976     01A1  3830               	iorlw	48
   977     01A2  009F               	movwf	31	;volatile
   978     01A3                     l916:
   979                           
   980                           ;USART.c: 142:     ADCON1bits.ADFM = 0;
   981     01A3  1683               	bsf	3,5	;RP0=1, select bank1
   982     01A4  1303               	bcf	3,6	;RP1=0, select bank1
   983     01A5  139F               	bcf	31,7	;volatile
   984     01A6                     l918:
   985                           
   986                           ;USART.c: 143:     _delay((unsigned long)((50)*(1000000/4000000.0)));
   987     01A6  3003               	movlw	3
   988     01A7  00F4               	movwf	??_setup
   989     01A8                     u287:
   990     01A8  0BF4               	decfsz	??_setup,f
   991     01A9  29A8               	goto	u287
   992     01AA  29AB               	nop2
   993     01AB                     l920:
   994                           
   995                           ;USART.c: 144:     ADCON0bits.ADON = 1;
   996     01AB  1283               	bcf	3,5	;RP0=0, select bank0
   997     01AC  1303               	bcf	3,6	;RP1=0, select bank0
   998     01AD  141F               	bsf	31,0	;volatile
   999     01AE                     l922:
  1000                           
  1001                           ;USART.c: 146:     PIR1bits.ADIF = 0;
  1002     01AE  130C               	bcf	12,6	;volatile
  1003     01AF                     l924:
  1004                           
  1005                           ;USART.c: 147:     PIE1bits.ADIE = 1;
  1006     01AF  1683               	bsf	3,5	;RP0=1, select bank1
  1007     01B0  1303               	bcf	3,6	;RP1=0, select bank1
  1008     01B1  170C               	bsf	12,6	;volatile
  1009     01B2                     l926:
  1010                           
  1011                           ;USART.c: 149:     PIR1bits.RCIF = 0;
  1012     01B2  1283               	bcf	3,5	;RP0=0, select bank0
  1013     01B3  1303               	bcf	3,6	;RP1=0, select bank0
  1014     01B4  128C               	bcf	12,5	;volatile
  1015     01B5                     l928:
  1016                           
  1017                           ;USART.c: 150:     PIE1bits.RCIE = 0;
  1018     01B5  1683               	bsf	3,5	;RP0=1, select bank1
  1019     01B6  1303               	bcf	3,6	;RP1=0, select bank1
  1020     01B7  128C               	bcf	12,5	;volatile
  1021     01B8                     l930:
  1022                           
  1023                           ;USART.c: 151:     INTCONbits.PEIE = 1;
  1024     01B8  170B               	bsf	11,6	;volatile
  1025     01B9                     l932:
  1026                           
  1027                           ;USART.c: 152:     INTCONbits.GIE = 1;
  1028     01B9  178B               	bsf	11,7	;volatile
  1029     01BA                     l94:
  1030     01BA  0008               	return
  1031     01BB                     __end_of_setup:
  1032                           
  1033                           	psect	text3
  1034     022D                     __ptext3:	
  1035 ;; *************** function ___bmul *****************
  1036 ;; Defined at:
  1037 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul8.c"
  1038 ;; Parameters:    Size  Location     Type
  1039 ;;  multiplier      1    wreg     unsigned char 
  1040 ;;  multiplicand    1    4[COMMON] unsigned char 
  1041 ;; Auto vars:     Size  Location     Type
  1042 ;;  multiplier      1    7[COMMON] unsigned char 
  1043 ;;  product         1    6[COMMON] unsigned char 
  1044 ;; Return value:  Size  Location     Type
  1045 ;;                  1    wreg      unsigned char 
  1046 ;; Registers used:
  1047 ;;		wreg, status,2, status,0
  1048 ;; Tracked objects:
  1049 ;;		On entry : 0/0
  1050 ;;		On exit  : 0/0
  1051 ;;		Unchanged: 0/0
  1052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1053 ;;      Params:         1       0       0       0       0
  1054 ;;      Locals:         2       0       0       0       0
  1055 ;;      Temps:          1       0       0       0       0
  1056 ;;      Totals:         4       0       0       0       0
  1057 ;;Total ram usage:        4 bytes
  1058 ;; Hardware stack levels used: 1
  1059 ;; Hardware stack levels required when called: 1
  1060 ;; This function calls:
  1061 ;;		Nothing
  1062 ;; This function is called by:
  1063 ;;		_main
  1064 ;; This function uses a non-reentrant model
  1065 ;;
  1066                           
  1067     022D                     ___bmul:	
  1068                           ;psect for function ___bmul
  1069                           
  1070                           
  1071                           ;incstack = 0
  1072                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1073                           ;___bmul@multiplier stored from wreg
  1074     022D  00F7               	movwf	___bmul@multiplier
  1075     022E                     l962:
  1076     022E  01F6               	clrf	___bmul@product
  1077     022F                     l964:
  1078     022F  1C77               	btfss	___bmul@multiplier,0
  1079     0230  2A32               	goto	u191
  1080     0231  2A33               	goto	u190
  1081     0232                     u191:
  1082     0232  2A37               	goto	l968
  1083     0233                     u190:
  1084     0233                     l966:
  1085     0233  0874               	movf	___bmul@multiplicand,w
  1086     0234  00F5               	movwf	??___bmul
  1087     0235  0875               	movf	??___bmul,w
  1088     0236  07F6               	addwf	___bmul@product,f
  1089     0237                     l968:
  1090     0237  1003               	clrc
  1091     0238  0DF4               	rlf	___bmul@multiplicand,f
  1092     0239                     l970:
  1093     0239  1003               	clrc
  1094     023A  0CF7               	rrf	___bmul@multiplier,f
  1095     023B  0877               	movf	___bmul@multiplier,w
  1096     023C  1D03               	btfss	3,2
  1097     023D  2A3F               	goto	u201
  1098     023E  2A40               	goto	u200
  1099     023F                     u201:
  1100     023F  2A2F               	goto	l964
  1101     0240                     u200:
  1102     0240                     l972:
  1103     0240  0876               	movf	___bmul@product,w
  1104     0241                     l224:
  1105     0241  0008               	return
  1106     0242                     __end_of___bmul:
  1107                           
  1108                           	psect	text4
  1109     024E                     __ptext4:	
  1110 ;; *************** function _USART_read *****************
  1111 ;; Defined at:
  1112 ;;		line 172 in file "USART.c"
  1113 ;; Parameters:    Size  Location     Type
  1114 ;;		None
  1115 ;; Auto vars:     Size  Location     Type
  1116 ;;		None
  1117 ;; Return value:  Size  Location     Type
  1118 ;;                  1    wreg      unsigned char 
  1119 ;; Registers used:
  1120 ;;		wreg
  1121 ;; Tracked objects:
  1122 ;;		On entry : 0/0
  1123 ;;		On exit  : 0/0
  1124 ;;		Unchanged: 0/0
  1125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1126 ;;      Params:         0       0       0       0       0
  1127 ;;      Locals:         0       0       0       0       0
  1128 ;;      Temps:          0       0       0       0       0
  1129 ;;      Totals:         0       0       0       0       0
  1130 ;;Total ram usage:        0 bytes
  1131 ;; Hardware stack levels used: 1
  1132 ;; Hardware stack levels required when called: 1
  1133 ;; This function calls:
  1134 ;;		Nothing
  1135 ;; This function is called by:
  1136 ;;		_main
  1137 ;; This function uses a non-reentrant model
  1138 ;;
  1139                           
  1140     024E                     _USART_read:	
  1141                           ;psect for function _USART_read
  1142                           
  1143     024E                     l942:	
  1144                           ;incstack = 0
  1145                           ; Regs used in _USART_read: [wreg]
  1146                           
  1147     024E                     l109:	
  1148                           ;USART.c: 174:     while(!RCIF);
  1149                           
  1150     024E  1283               	bcf	3,5	;RP0=0, select bank0
  1151     024F  1303               	bcf	3,6	;RP1=0, select bank0
  1152     0250  1E8C               	btfss	12,5	;volatile
  1153     0251  2A53               	goto	u161
  1154     0252  2A54               	goto	u160
  1155     0253                     u161:
  1156     0253  2A4E               	goto	l109
  1157     0254                     u160:
  1158     0254                     l944:
  1159                           
  1160                           ;USART.c: 175:     return RCREG;
  1161     0254  081A               	movf	26,w	;volatile
  1162     0255                     l112:
  1163     0255  0008               	return
  1164     0256                     __end_of_USART_read:
  1165                           
  1166                           	psect	text5
  1167     01E7                     __ptext5:	
  1168 ;; *************** function _USART_print *****************
  1169 ;; Defined at:
  1170 ;;		line 162 in file "USART.c"
  1171 ;; Parameters:    Size  Location     Type
  1172 ;;  string          1    wreg     PTR const unsigned char 
  1173 ;;		 -> STR_4(53), STR_1(33), 
  1174 ;; Auto vars:     Size  Location     Type
  1175 ;;  string          1    7[COMMON] PTR const unsigned char 
  1176 ;;		 -> STR_4(53), STR_1(33), 
  1177 ;;  i               2    5[COMMON] int 
  1178 ;; Return value:  Size  Location     Type
  1179 ;;                  1    wreg      void 
  1180 ;; Registers used:
  1181 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1182 ;; Tracked objects:
  1183 ;;		On entry : 0/0
  1184 ;;		On exit  : 0/0
  1185 ;;		Unchanged: 0/0
  1186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1187 ;;      Params:         0       0       0       0       0
  1188 ;;      Locals:         3       0       0       0       0
  1189 ;;      Temps:          0       0       0       0       0
  1190 ;;      Totals:         3       0       0       0       0
  1191 ;;Total ram usage:        3 bytes
  1192 ;; Hardware stack levels used: 1
  1193 ;; Hardware stack levels required when called: 2
  1194 ;; This function calls:
  1195 ;;		_USART_send
  1196 ;; This function is called by:
  1197 ;;		_main
  1198 ;; This function uses a non-reentrant model
  1199 ;;
  1200                           
  1201     01E7                     _USART_print:	
  1202                           ;psect for function _USART_print
  1203                           
  1204                           
  1205                           ;incstack = 0
  1206                           ; Regs used in _USART_print: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1207                           ;USART_print@string stored from wreg
  1208     01E7  00F7               	movwf	USART_print@string
  1209     01E8                     l934:
  1210                           
  1211                           ;USART.c: 162: void USART_print(const char *string);USART.c: 163: {;USART.c: 164:     in
      +                          t i = 0;
  1212     01E8  01F5               	clrf	USART_print@i
  1213     01E9  01F6               	clrf	USART_print@i+1
  1214     01EA  29FE               	goto	l940
  1215     01EB                     l936:
  1216                           
  1217                           ;USART.c: 167:     {;USART.c: 168:         USART_send(string[i]);
  1218     01EB  0875               	movf	USART_print@i,w
  1219     01EC  0777               	addwf	USART_print@string,w
  1220     01ED  0084               	movwf	4
  1221     01EE  120A  118A  2100  120A  118A  	fcall	stringdir
  1222     01F3  120A  118A  2242  120A  118A  	fcall	_USART_send
  1223     01F8                     l938:
  1224                           
  1225                           ;USART.c: 169:     }
  1226     01F8  3001               	movlw	1
  1227     01F9  07F5               	addwf	USART_print@i,f
  1228     01FA  1803               	skipnc
  1229     01FB  0AF6               	incf	USART_print@i+1,f
  1230     01FC  3000               	movlw	0
  1231     01FD  07F6               	addwf	USART_print@i+1,f
  1232     01FE                     l940:
  1233     01FE  0875               	movf	USART_print@i,w
  1234     01FF  0777               	addwf	USART_print@string,w
  1235     0200  0084               	movwf	4
  1236     0201  120A  118A  2100  120A  118A  	fcall	stringdir
  1237     0206  3A00               	xorlw	0
  1238     0207  1D03               	skipz
  1239     0208  2A0A               	goto	u151
  1240     0209  2A0B               	goto	u150
  1241     020A                     u151:
  1242     020A  29EB               	goto	l936
  1243     020B                     u150:
  1244     020B                     l106:
  1245     020B  0008               	return
  1246     020C                     __end_of_USART_print:
  1247                           
  1248                           	psect	text6
  1249     0242                     __ptext6:	
  1250 ;; *************** function _USART_send *****************
  1251 ;; Defined at:
  1252 ;;		line 156 in file "USART.c"
  1253 ;; Parameters:    Size  Location     Type
  1254 ;;  data            1    wreg     const unsigned char 
  1255 ;; Auto vars:     Size  Location     Type
  1256 ;;  data            1    4[COMMON] const unsigned char 
  1257 ;; Return value:  Size  Location     Type
  1258 ;;                  1    wreg      void 
  1259 ;; Registers used:
  1260 ;;		wreg
  1261 ;; Tracked objects:
  1262 ;;		On entry : 0/0
  1263 ;;		On exit  : 0/0
  1264 ;;		Unchanged: 0/0
  1265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1266 ;;      Params:         0       0       0       0       0
  1267 ;;      Locals:         1       0       0       0       0
  1268 ;;      Temps:          0       0       0       0       0
  1269 ;;      Totals:         1       0       0       0       0
  1270 ;;Total ram usage:        1 bytes
  1271 ;; Hardware stack levels used: 1
  1272 ;; Hardware stack levels required when called: 1
  1273 ;; This function calls:
  1274 ;;		Nothing
  1275 ;; This function is called by:
  1276 ;;		_main
  1277 ;;		_USART_print
  1278 ;; This function uses a non-reentrant model
  1279 ;;
  1280                           
  1281     0242                     _USART_send:	
  1282                           ;psect for function _USART_send
  1283                           
  1284                           
  1285                           ;incstack = 0
  1286                           ; Regs used in _USART_send: [wreg]
  1287                           ;USART_send@data stored from wreg
  1288     0242  00F4               	movwf	USART_send@data
  1289     0243                     l870:
  1290     0243                     l97:	
  1291                           ;USART.c: 156: void USART_send(const char data);USART.c: 157: {;USART.c: 158:     while(
      +                          !TRMT);
  1292                           
  1293     0243  1683               	bsf	3,5	;RP0=1, select bank1
  1294     0244  1303               	bcf	3,6	;RP1=0, select bank1
  1295     0245  1C98               	btfss	24,1	;volatile
  1296     0246  2A48               	goto	u141
  1297     0247  2A49               	goto	u140
  1298     0248                     u141:
  1299     0248  2A43               	goto	l97
  1300     0249                     u140:
  1301     0249                     l872:
  1302                           
  1303                           ;USART.c: 159:     TXREG = data;
  1304     0249  0874               	movf	USART_send@data,w
  1305     024A  1283               	bcf	3,5	;RP0=0, select bank0
  1306     024B  1303               	bcf	3,6	;RP1=0, select bank0
  1307     024C  0099               	movwf	25	;volatile
  1308     024D                     l100:
  1309     024D  0008               	return
  1310     024E                     __end_of_USART_send:
  1311                           
  1312                           	psect	text7
  1313     020C                     __ptext7:	
  1314 ;; *************** function _isr *****************
  1315 ;; Defined at:
  1316 ;;		line 51 in file "USART.c"
  1317 ;; Parameters:    Size  Location     Type
  1318 ;;		None
  1319 ;; Auto vars:     Size  Location     Type
  1320 ;;		None
  1321 ;; Return value:  Size  Location     Type
  1322 ;;                  1    wreg      void 
  1323 ;; Registers used:
  1324 ;;		wreg, status,2, status,0
  1325 ;; Tracked objects:
  1326 ;;		On entry : 0/0
  1327 ;;		On exit  : 0/0
  1328 ;;		Unchanged: 0/0
  1329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1330 ;;      Params:         0       0       0       0       0
  1331 ;;      Locals:         0       0       0       0       0
  1332 ;;      Temps:          4       0       0       0       0
  1333 ;;      Totals:         4       0       0       0       0
  1334 ;;Total ram usage:        4 bytes
  1335 ;; Hardware stack levels used: 1
  1336 ;; This function calls:
  1337 ;;		Nothing
  1338 ;; This function is called by:
  1339 ;;		Interrupt level 1
  1340 ;; This function uses a non-reentrant model
  1341 ;;
  1342                           
  1343     020C                     _isr:	
  1344                           ;psect for function _isr
  1345                           
  1346     020C                     i1l976:
  1347                           
  1348                           ;USART.c: 52:     if(PIR1bits.ADIF){
  1349     020C  1283               	bcf	3,5	;RP0=0, select bank0
  1350     020D  1303               	bcf	3,6	;RP1=0, select bank0
  1351     020E  1F0C               	btfss	12,6	;volatile
  1352     020F  2A11               	goto	u21_21
  1353     0210  2A12               	goto	u21_20
  1354     0211                     u21_21:
  1355     0211  2A26               	goto	i1l76
  1356     0212                     u21_20:
  1357     0212                     i1l978:
  1358                           
  1359                           ;USART.c: 53:         if(ADCON0bits.CHS == 12){
  1360     0212  0C1F               	rrf	31,w	;volatile
  1361     0213  00F0               	movwf	??_isr
  1362     0214  0C70               	rrf	??_isr,w
  1363     0215  390F               	andlw	15
  1364     0216  3A0C               	xorlw	12
  1365     0217  1D03               	skipz
  1366     0218  2A1A               	goto	u22_21
  1367     0219  2A1B               	goto	u22_20
  1368     021A                     u22_21:
  1369     021A  2A1E               	goto	i1l982
  1370     021B                     u22_20:
  1371     021B                     i1l980:
  1372                           
  1373                           ;USART.c: 54:             PORTA = ADRESH;
  1374     021B  081E               	movf	30,w	;volatile
  1375     021C  0085               	movwf	5	;volatile
  1376                           
  1377                           ;USART.c: 55:         }
  1378     021D  2A25               	goto	i1l984
  1379     021E                     i1l982:
  1380                           
  1381                           ;USART.c: 58:             numero = ADRESH;
  1382     021E  081E               	movf	30,w	;volatile
  1383     021F  00F0               	movwf	??_isr
  1384     0220  01F1               	clrf	??_isr+1
  1385     0221  0870               	movf	??_isr,w
  1386     0222  00A0               	movwf	_numero
  1387     0223  0871               	movf	??_isr+1,w
  1388     0224  00A1               	movwf	_numero+1
  1389     0225                     i1l984:
  1390                           
  1391                           ;USART.c: 59:             PIR1bits.ADIF = 0;
  1392     0225  130C               	bcf	12,6	;volatile
  1393     0226                     i1l76:
  1394     0226  0873               	movf	??_isr+3,w
  1395     0227  008A               	movwf	10
  1396     0228  0E72               	swapf	??_isr+2,w
  1397     0229  0083               	movwf	3
  1398     022A  0EFE               	swapf	btemp,f
  1399     022B  0E7E               	swapf	btemp,w
  1400     022C  0009               	retfie
  1401     022D                     __end_of_isr:
  1402     007E                     btemp	set	126	;btemp
  1403     007E                     wtemp0	set	126
  1404                           
  1405                           	psect	intentry
  1406     0004                     __pintentry:	
  1407                           ;incstack = 0
  1408                           ; Regs used in _isr: [wreg+status,2+status,0]
  1409                           
  1410     0004                     interrupt_function:
  1411     007E                     saved_w	set	btemp
  1412     0004  00FE               	movwf	btemp
  1413     0005  0E03               	swapf	3,w
  1414     0006  00F2               	movwf	??_isr+2
  1415     0007  080A               	movf	10,w
  1416     0008  00F3               	movwf	??_isr+3
  1417     0009  120A  118A  2A0C   	ljmp	_isr
  1418                           
  1419                           	psect	idloc
  1420                           
  1421                           ;Config register IDLOC0 @ 0x2000
  1422                           ;	unspecified, using default values
  1423     2000                     	org	8192
  1424     2000  3FFF               	dw	16383
  1425                           
  1426                           ;Config register IDLOC1 @ 0x2001
  1427                           ;	unspecified, using default values
  1428     2001                     	org	8193
  1429     2001  3FFF               	dw	16383
  1430                           
  1431                           ;Config register IDLOC2 @ 0x2002
  1432                           ;	unspecified, using default values
  1433     2002                     	org	8194
  1434     2002  3FFF               	dw	16383
  1435                           
  1436                           ;Config register IDLOC3 @ 0x2003
  1437                           ;	unspecified, using default values
  1438     2003                     	org	8195
  1439     2003  3FFF               	dw	16383
  1440                           
  1441                           	psect	config
  1442                           
  1443                           ;Config register CONFIG1 @ 0x2007
  1444                           ;	Oscillator Selection bits
  1445                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  1446                           ;	Watchdog Timer Enable bit
  1447                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1448                           ;	Power-up Timer Enable bit
  1449                           ;	PWRTE = OFF, PWRT disabled
  1450                           ;	RE3/MCLR pin function select bit
  1451                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1452                           ;	Code Protection bit
  1453                           ;	CP = OFF, Program memory code protection is disabled
  1454                           ;	Data Code Protection bit
  1455                           ;	CPD = OFF, Data memory code protection is disabled
  1456                           ;	Brown Out Reset Selection bits
  1457                           ;	BOREN = OFF, BOR disabled
  1458                           ;	Internal External Switchover bit
  1459                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1460                           ;	Fail-Safe Clock Monitor Enabled bit
  1461                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1462                           ;	Low Voltage Programming Enable bit
  1463                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1464                           ;	In-Circuit Debugger Mode bit
  1465                           ;	DEBUG = 0x1, unprogramme  1466     2007                     	org	8199
  1467     2007  20D4               	dw	8404
  1468                           
  1469                           ;Config register CONFIG2 @ 0x2008
  1470                           ;	Brown-out Reset Selection bit
  1471                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1472                           ;	Flash Program Memory Self Write Enable bits
  1473                           ;	WRT = OFF, Write protection off
  1474     2008                     	org	8200
  1475     2008  3FFF               	dw	16383

Data Sizes:
    Strings     90
    Constant    1
    Data        1
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      10
    BANK0            80      3       8
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 2
		 -> STR_3(CODE[2]), STR_2(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 2
		 -> input(BANK0[2]), 

    USART_print@string	PTR const unsigned char  size(1) Largest target is 53
		 -> STR_4(CODE[53]), STR_1(CODE[33]), 

    cString	PTR const unsigned char  size(1) Largest target is 33
		 -> STR_1(CODE[33]), 


Critical Paths under _main in COMMON

    _main->_strcmp
    _USART_print->_USART_send

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     767
                                              0 BANK0      3     3      0
                        _USART_print
                         _USART_read
                         _USART_send
                             ___bmul
                              _setup
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     4      2     309
                                              4 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _setup                                                1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     168
                                              4 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _USART_read                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _USART_print                                          3     3      0     178
                                              5 COMMON     3     3      0
                         _USART_send
 ---------------------------------------------------------------------------------
 (1) _USART_send                                           1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USART_print
     _USART_send
   _USART_read
   _USART_send
   ___bmul
   _setup
   _strcmp

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      3       8       5       10.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      12      12        0.0%
ABS                  0      0      12       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Apr 20 11:34:30 2023

            _USART_print 01E7                        pc 0002           ___bmul@product 0076  
                     l94 01BA                       l97 0243                       fsr 0004  
                    l100 024D                      l112 0255                      l106 020B  
                    l109 024E                      l224 0241                      l900 0186  
                    l910 0190                      l902 018A                      l654 01E6  
                    l920 01AB                      l912 0199                      l904 018B  
                    l930 01B8                      l922 01AE                      l914 019C  
                    l906 018E                      l940 01FE                      l932 01B9  
                    l924 01AF                      l916 01A3                      l908 018F  
                    l870 0243                      l934 01E8                      l942 024E  
                    l926 01B2                      l918 01A6                      l950 01BD  
                    l872 0249                      l936 01EB                      l944 0254  
                    l928 01B5                      l880 0169                      l952 01C1  
                    l938 01F8                      l970 0239                      l962 022E  
                    l890 017A                      l882 016C                      l874 0161  
                    l954 01C5                      l972 0240                      l964 022F  
                    l892 0180                      l884 0170                      l876 0164  
                    l956 01DA                      l948 01BC                      l966 0233  
                    l894 0181                      l886 0174                      l878 0166  
                    l958 01E1                      l990 0022                      l968 0237  
                    l896 0182                      l888 0177                      l992 0028  
                    l898 0183                      l994 0031                      l996 0036  
                    l988 001D                      l998 003A                      u200 0240  
                    u201 023F                      u140 0249                      u141 0248  
                    u150 020B                      u230 0028                      u151 020A  
                    u231 0027                      u160 0254                      u240 0031  
                    u161 0253                      u241 0030                      u170 01DA  
                    u250 0061                      u171 01D9                      u251 0060  
                    u180 01E1                      u260 0074                      u181 01E0  
                    u261 0073                      u190 0233                      u191 0232  
                    u277 003E                      u287 01A8                      _isr 020C  
                    fsr0 0004                      indf 0000                     l1000 0041  
                   l1010 0061                     l1002 0044                     l1020 0088  
                   l1012 0066                     l1004 004A                     l1022 0090  
                   l1014 0074                     l1006 0052                     l1024 0096  
                   l1016 007A                     l1008 0053                     l1018 0082  
                   l1026 00A6                     ?_isr 0070                     STR_1 013C  
                   STR_2 015D                     STR_3 015F                     STR_4 0107  
                   _RCIF 0065                     i1l76 0226                     _TRMT 04C1  
            main@lowByte 0026                     _dato 0106                     _main 001D  
                   btemp 007E                     start 000C        ___bmul@multiplier 0077  
                  ??_isr 0070             main@highByte 0025                    ?_main 0070  
                  _ANSEL 0188                    i1l980 021B                    i1l982 021E  
                  i1l984 0225                    i1l976 020C                    i1l978 0212  
                  _RCREG 001A                    u21_20 0212                    u21_21 0211  
                  u22_20 021B                    u22_21 021A                    _SPBRG 0099  
                  _PORTA 0005                    _PORTB 0006                    _PORTD 0008  
                  _TRISA 0085                    _TRISB 0086                    _TRISD 0088  
                  _TXREG 0019                    _input 0022                    _setup 0161  
                  pclath 000A                    status 0003                    wtemp0 007E  
            ?_USART_read 0070          __initialization 000F              ?_USART_send 0070  
           __end_of_dato 0107             __end_of_main 00AD             USART_print@i 0075  
                 ??_main 0024                   _ADRESH 001E                   ?_setup 0070  
                 _ANSELH 0189                   _SPBRGH 009A                   ___bmul 022D  
                 _numero 0020                   _strcmp 01BB                   saved_w 007E  
__end_of__initialization 0019      ___bmul@multiplicand 0074           __pcstackCOMMON 0070  
           ?_USART_print 0070             __pidataBANK0 0256            __end_of_setup 01BB  
                ??_setup 0074               __pbssBANK0 0020               __pmaintext 001D  
                ?___bmul 0074               __pintentry 0004                  ?_strcmp 0074  
             __stringtab 0100             ??_USART_read 0074             ??_USART_send 0074  
                _cString 0027                  __ptext1 01BB                  __ptext2 0161  
                __ptext3 022D                  __ptext4 024E                  __ptext5 01E7  
                __ptext6 0242                  __ptext7 020C       __end_of_USART_read 0256  
     __end_of_USART_send 024E     end_of_initialization 0019                _RCSTAbits 0018  
                strcmp@r 0078                _TXSTAbits 0098           __end_of___bmul 0242  
            _BAUDCTLbits 0187           __end_of_strcmp 01E7      start_initialization 000F  
            __end_of_isr 022D           USART_send@data 0074                 ??___bmul 0075  
            __pdataBANK0 0027                 ??_strcmp 0076                ___latbits 0002  
          __pcstackBANK0 0024                __pstrings 0100        interrupt_function 0004  
               _PIE1bits 008C                 _PIR1bits 000C               _ADCON0bits 001F  
            __stringbase 0105               _ADCON1bits 009F            ??_USART_print 0075  
     __end_of__stringtab 0106        USART_print@string 0077      __end_of_USART_print 020C  
             _INTCONbits 000B                 intlevel1 0000                stringcode 0100  
             _OSCCONbits 008F                 strcmp@s1 0079                 strcmp@s2 0074  
               stringdir 0100                 stringtab 0100               _USART_read 024E  
             _USART_send 0242  
